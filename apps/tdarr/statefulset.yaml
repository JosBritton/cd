apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tdarr
  labels:
    name: tdarr
    app: tdarr
    app.kubernetes.io/name: tdarr
    app.kubernetes.io/instance: tdarr
  namespace: tdarr
spec:
  selector:
    matchLabels:
      app: tdarr
  serviceName: tdarr
  replicas: 1
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  template:
    metadata:
      labels:
        app: tdarr
    spec:
      containers:
      - name: tdarr
        image: ghcr.io/haveagitgat/tdarr:2.23.01@sha256:3e08ace2525b7f0bc7f99246168ad01ba9f1ef58a6ddfdd7d229691d127f93fd
        imagePullPolicy: IfNotPresent
        env:
        - name: S6_READ_ONLY_ROOT
          value: "1"
        - name: UMASK
          value: "0022"
        - name: TZ
          value: Etc/UTC
        - name: PUID
          value: "65534"
        - name: PGID
          value: "65534"
        - name: internalNode
          value: "true"
        - name: nodeID
          value: internal
        ports:
        - containerPort: 8265
          name: ui
        - containerPort: 8266
          name: server
        livenessProbe:
          httpGet:
            path: /api/v2/status
            port: 8266
            scheme: HTTP
          initialDelaySeconds: 60
          failureThreshold: 5
          successThreshold: 1
          timeoutSeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2/status
            port: 8266
            scheme: HTTP
          initialDelaySeconds: 10
          failureThreshold: 5
          successThreshold: 2
          timeoutSeconds: 5
          periodSeconds: 10
        startupProbe:
          tcpSocket:
            port: 8266
          initialDelaySeconds: 10
          failureThreshold: 60
          successThreshold: 1
          timeoutSeconds: 2
          periodSeconds: 5
        volumeMounts:
        - mountPath: /app/configs
          name: config
        - mountPath: /app/server
          name: server
        - mountPath: /app/logs
          name: logs
        - mountPath: /movies
          name: movies
        - mountPath: /tv
          name: tv
        - mountPath: /emp
          name: emp
      volumes:
      - name: media
        nfs:
          path: /mnt/artemis/data/media
          server: nas1.private.swifthomelab.net
      - name: movies
        nfs:
          server: nas1.private.swifthomelab.net
          path: /mnt/artemis/data/bt1/completed/movies
      - name: tv
        nfs:
          server: nas1.private.swifthomelab.net
          path: /mnt/artemis/data/bt1/completed/tv
      - name: emp
        nfs:
          server: nas1.private.swifthomelab.net
          path: /mnt/artemis/data/bt1/completed/emp
      - name: logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: config
    spec:
      accessModes: [ReadWriteOnce]
      storageClassName: proxmox-csi
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: server
    spec:
      accessModes: [ReadWriteOnce]
      storageClassName: proxmox-csi
      resources:
        requests:
          storage: 10Gi
